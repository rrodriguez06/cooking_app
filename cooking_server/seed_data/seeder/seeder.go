package seeder

import (
	"context"
	"fmt"
	"math/rand"
	"time"

	"github.com/romainrodriguez/cooking_server/internal/dto"
	"github.com/romainrodriguez/cooking_server/internal/services/orm"
)

type SeederService struct {
	ormService *orm.ORMService
	random     *rand.Rand
}

func NewSeederService(ormService *orm.ORMService) *SeederService {
	return &SeederService{
		ormService: ormService,
		random:     rand.New(rand.NewSource(time.Now().UnixNano())),
	}
}

// SeedIngredients cr√©e des ingr√©dients de test
func (s *SeederService) SeedIngredients(ctx context.Context) error {
	ingredients := []dto.Ingredient{
		// L√©gumes
		{Name: "Tomates", Description: "Tomates fra√Æches", Category: "l√©gume"},
		{Name: "Oignons", Description: "Oignons jaunes", Category: "l√©gume"},
		{Name: "Ail", Description: "Gousses d'ail", Category: "l√©gume"},
		{Name: "Carottes", Description: "Carottes fra√Æches", Category: "l√©gume"},
		{Name: "Pommes de terre", Description: "Pommes de terre de consommation", Category: "l√©gume"},
		{Name: "Courgettes", Description: "Courgettes vertes", Category: "l√©gume"},
		{Name: "Poivrons", Description: "Poivrons de couleur", Category: "l√©gume"},
		{Name: "Champignons de Paris", Description: "Champignons frais", Category: "l√©gume"},
		{Name: "√âpinards", Description: "Feuilles d'√©pinards", Category: "l√©gume"},
		{Name: "Brocolis", Description: "Bouquets de brocolis", Category: "l√©gume"},

		// Viandes
		{Name: "B≈ìuf hach√©", Description: "Viande de b≈ìuf hach√©e", Category: "viande"},
		{Name: "Filet de porc", Description: "Filet de porc frais", Category: "viande"},
		{Name: "Escalope de dinde", Description: "Escalope de dinde", Category: "viande"},
		{Name: "Cuisses de poulet", Description: "Cuisses de poulet fermier", Category: "viande"},
		{Name: "Filet de saumon", Description: "Filet de saumon frais", Category: "poisson"},
		{Name: "Crevettes", Description: "Crevettes d√©cortiqu√©es", Category: "fruits de mer"},

		// Produits laitiers
		{Name: "Lait entier", Description: "Lait de vache entier", Category: "produit laitier"},
		{Name: "Beurre", Description: "Beurre doux", Category: "produit laitier"},
		{Name: "Cr√®me fra√Æche", Description: "Cr√®me fra√Æche √©paisse", Category: "produit laitier"},
		{Name: "Fromage r√¢p√©", Description: "Emmental r√¢p√©", Category: "produit laitier"},
		{Name: "Mozzarella", Description: "Mozzarella di buffala", Category: "produit laitier"},
		{Name: "Parmesan", Description: "Parmesan AOP", Category: "produit laitier"},
		{Name: "≈íufs", Description: "≈íufs de poule fermiers", Category: "produit laitier"},

		// √âpices et herbes
		{Name: "Sel", Description: "Sel fin de table", Category: "√©pice"},
		{Name: "Poivre noir", Description: "Poivre noir moulu", Category: "√©pice"},
		{Name: "Thym", Description: "Thym s√©ch√©", Category: "herbe"},
		{Name: "Basilic", Description: "Feuilles de basilic frais", Category: "herbe"},
		{Name: "Persil", Description: "Persil plat", Category: "herbe"},
		{Name: "Paprika", Description: "Paprika doux", Category: "√©pice"},
		{Name: "Cumin", Description: "Cumin en poudre", Category: "√©pice"},
		{Name: "Origan", Description: "Origan s√©ch√©", Category: "herbe"},

		// F√©culents et c√©r√©ales
		{Name: "Riz basmati", Description: "Riz basmati long", Category: "f√©culent"},
		{Name: "P√¢tes", Description: "P√¢tes italiennes", Category: "f√©culent"},
		{Name: "Quinoa", Description: "Graines de quinoa", Category: "graine"},
		{Name: "Farine", Description: "Farine de bl√© T55", Category: "farine"},
		{Name: "Pain", Description: "Pain de campagne", Category: "f√©culent"},

		// Huiles et condiments
		{Name: "Huile d'olive", Description: "Huile d'olive extra vierge", Category: "huile"},
		{Name: "Vinaigre balsamique", Description: "Vinaigre balsamique de Mod√®ne", Category: "condiment"},
		{Name: "Moutarde", Description: "Moutarde de Dijon", Category: "condiment"},
		{Name: "Sauce soja", Description: "Sauce soja japonaise", Category: "condiment"},

		// Fruits
		{Name: "Citrons", Description: "Citrons jaunes", Category: "fruit"},
		{Name: "Pommes", Description: "Pommes golden", Category: "fruit"},
		{Name: "Bananes", Description: "Bananes m√ªres", Category: "fruit"},
	}

	for _, ingredient := range ingredients {
		// V√©rifier si l'ingr√©dient existe d√©j√†
		existing, _ := s.ormService.IngredientRepository.GetByName(ctx, ingredient.Name)
		if existing == nil {
			if err := s.ormService.IngredientRepository.Create(ctx, &ingredient); err != nil {
				return fmt.Errorf("erreur lors de la cr√©ation de l'ingr√©dient %s: %w", ingredient.Name, err)
			}
		}
	}

	return nil
}

// SeedEquipments cr√©e des √©quipements de test
func (s *SeederService) SeedEquipments(ctx context.Context) error {
	equipments := []dto.Equipment{
		// √âquipements de base
		{Name: "Couteau de chef", Description: "Couteau de cuisine principal", Category: "d√©coupe"},
		{Name: "Planche √† d√©couper", Description: "Planche en bois ou plastique", Category: "d√©coupe"},
		{Name: "Casserole", Description: "Casserole moyenne", Category: "cuisson"},
		{Name: "Po√™le", Description: "Po√™le antiadh√©sive", Category: "cuisson"},
		{Name: "Fouet", Description: "Fouet de cuisine", Category: "m√©lange"},
		{Name: "Spatule", Description: "Spatule en silicone", Category: "m√©lange"},
		{Name: "Cuill√®re en bois", Description: "Cuill√®re de cuisine en bois", Category: "m√©lange"},

		// √âlectrom√©nager
		{Name: "Four", Description: "Four √©lectrique ou gaz", Category: "√©lectrom√©nager"},
		{Name: "Mixeur", Description: "Mixeur plongeant", Category: "√©lectrom√©nager"},
		{Name: "Robot de cuisine", Description: "Robot multifonction", Category: "√©lectrom√©nager"},
		{Name: "Blender", Description: "Blender haute performance", Category: "√©lectrom√©nager"},

		// Mesure et pes√©e
		{Name: "Balance de cuisine", Description: "Balance √©lectronique", Category: "mesure"},
		{Name: "Verre doseur", Description: "Verre gradu√© pour liquides", Category: "mesure"},
		{Name: "Cuill√®res √† mesurer", Description: "Set de cuill√®res doseuses", Category: "mesure"},

		// Ustensiles sp√©cialis√©s
		{Name: "R√¢pe", Description: "R√¢pe multifonctions", Category: "pr√©paration"},
		{Name: "Presse-ail", Description: "Presse-ail en m√©tal", Category: "pr√©paration"},
		{Name: "Ouvre-bo√Æte", Description: "Ouvre-bo√Æte manuel", Category: "pr√©paration"},
		{Name: "√âconome", Description: "√âconome pour l√©gumes", Category: "pr√©paration"},

		// Cuisson sp√©cialis√©e
		{Name: "Wok", Description: "Wok traditionnel", Category: "cuisson"},
		{Name: "Sauteuse", Description: "Sauteuse avec couvercle", Category: "cuisson"},
		{Name: "Autocuiseur", Description: "Cocotte-minute", Category: "cuisson"},
		{Name: "Grille-pain", Description: "Grille-pain √©lectrique", Category: "√©lectrom√©nager"},

		// P√¢tisserie
		{Name: "Moule √† g√¢teau", Description: "Moule rond en m√©tal", Category: "p√¢tisserie"},
		{Name: "Rouleau √† p√¢tisserie", Description: "Rouleau en bois", Category: "p√¢tisserie"},
		{Name: "Poche √† douille", Description: "Poche en silicone", Category: "p√¢tisserie"},
	}

	for _, equipment := range equipments {
		// V√©rifier si l'√©quipement existe d√©j√†
		existing, _ := s.ormService.EquipmentRepository.GetByName(ctx, equipment.Name)
		if existing == nil {
			if err := s.ormService.EquipmentRepository.Create(ctx, &equipment); err != nil {
				return fmt.Errorf("erreur lors de la cr√©ation de l'√©quipement %s: %w", equipment.Name, err)
			}
		}
	}

	return nil
}

// SeedCategories cr√©e des cat√©gories de test
func (s *SeederService) SeedCategories(ctx context.Context) error {
	categories := []dto.Category{
		{Name: "Entr√©es", Description: "Plats servis en d√©but de repas", Color: "#FF6B6B", Icon: "ü•ó"},
		{Name: "Plats principaux", Description: "Plats de r√©sistance", Color: "#4ECDC4", Icon: "üçΩÔ∏è"},
		{Name: "Desserts", Description: "Douceurs sucr√©es", Color: "#45B7D1", Icon: "üç∞"},
		{Name: "Ap√©ritifs", Description: "Amuse-bouches et cocktails", Color: "#96CEB4", Icon: "üç∏"},
		{Name: "Soupes", Description: "Potages et velout√©s", Color: "#FFEAA7", Icon: "üç≤"},
		{Name: "Salades", Description: "Salades compos√©es", Color: "#DDA0DD", Icon: "ü•ô"},
		{Name: "P√¢tes", Description: "Plats de p√¢tes", Color: "#98D8C8", Icon: "üçù"},
		{Name: "Viandes", Description: "Plats √† base de viande", Color: "#F7DC6F", Icon: "ü•©"},
		{Name: "Poissons", Description: "Plats de poissons et fruits de mer", Color: "#85C1E9", Icon: "üêü"},
		{Name: "V√©g√©tarien", Description: "Plats sans viande", Color: "#A9DFBF", Icon: "üå±"},
		{Name: "Boissons", Description: "Boissons chaudes et froides", Color: "#F8C471", Icon: "ü•§"},
		{Name: "Petit-d√©jeuner", Description: "Plats du matin", Color: "#D7BDE2", Icon: "ü•û"},
	}

	for _, category := range categories {
		// V√©rifier si la cat√©gorie existe d√©j√†
		existing, _ := s.ormService.CategoryRepository.GetByName(ctx, category.Name)
		if existing == nil {
			if err := s.ormService.CategoryRepository.Create(ctx, &category); err != nil {
				return fmt.Errorf("erreur lors de la cr√©ation de la cat√©gorie %s: %w", category.Name, err)
			}
		}
	}

	return nil
}

// SeedTags cr√©e des tags de test
func (s *SeederService) SeedTags(ctx context.Context) error {
	tags := []dto.Tag{
		{Name: "Rapide", Description: "Recette rapide √† pr√©parer (moins de 30 min)"},
		{Name: "Facile", Description: "Recette simple √† r√©aliser"},
		{Name: "√âconomique", Description: "Recette peu co√ªteuse"},
		{Name: "Sant√©", Description: "Recette √©quilibr√©e et nutritive"},
		{Name: "Sans gluten", Description: "Recette adapt√©e aux intol√©rants au gluten"},
		{Name: "V√©g√©talien", Description: "Recette 100% v√©g√©tale"},
		{Name: "Bio", Description: "Recette avec des ingr√©dients biologiques"},
		{Name: "√âpic√©", Description: "Recette relev√©e"},
		{Name: "Sucr√©", Description: "Recette sucr√©e"},
		{Name: "Sal√©", Description: "Recette sal√©e"},
		{Name: "Fran√ßais", Description: "Recette de la cuisine fran√ßaise"},
		{Name: "Italien", Description: "Recette de la cuisine italienne"},
		{Name: "Asiatique", Description: "Recette de la cuisine asiatique"},
		{Name: "M√©diterran√©en", Description: "Recette de la cuisine m√©diterran√©enne"},
		{Name: "Mexicain", Description: "Recette de la cuisine mexicaine"},
		{Name: "Indien", Description: "Recette de la cuisine indienne"},
		{Name: "Comfort food", Description: "Plat r√©confortant"},
		{Name: "F√™te", Description: "Recette pour occasions sp√©ciales"},
		{Name: "√ât√©", Description: "Recette de saison estivale"},
		{Name: "Hiver", Description: "Recette de saison hivernale"},
		{Name: "Automne", Description: "Recette de saison automnale"},
		{Name: "Printemps", Description: "Recette de saison printani√®re"},
		{Name: "Micro-ondes", Description: "Recette au micro-ondes"},
		{Name: "Four", Description: "Recette au four"},
		{Name: "Grill√©", Description: "Recette grill√©e"},
		{Name: "Bouilli", Description: "Recette bouillie"},
		{Name: "Frit", Description: "Recette frite"},
		{Name: "Cru", Description: "Recette crue"},
		{Name: "Marin√©", Description: "Recette marin√©e"},
		{Name: "Fum√©", Description: "Recette fum√©e"},
	}

	for _, tag := range tags {
		// V√©rifier si le tag existe d√©j√†
		existing, _ := s.ormService.TagRepository.GetByName(ctx, tag.Name)
		if existing == nil {
			if err := s.ormService.TagRepository.Create(ctx, &tag); err != nil {
				return fmt.Errorf("erreur lors de la cr√©ation du tag %s: %w", tag.Name, err)
			}
		}
	}

	return nil
}

// UpdateIngredientsWithIcons met √† jour les ingr√©dients existants avec des ic√¥nes
func (s *SeederService) UpdateIngredientsWithIcons(ctx context.Context) error {
	// Mapping des noms d'ingr√©dients vers leurs ic√¥nes
	ingredientIcons := map[string]string{
		// L√©gumes
		"Tomates":              "üçÖ",
		"Oignons":              "üßÖ",
		"Ail":                  "üßÑ",
		"Carottes":             "ü•ï",
		"Pommes de terre":      "ü•î",
		"Courgettes":           "ü•í",
		"Poivrons":             "ü´ë",
		"Champignons de Paris": "üçÑ",
		"√âpinards":             "ü•¨",
		"Brocolis":             "ü•¶",

		// Viandes
		"B≈ìuf hach√©":        "ü•©",
		"Filet de porc":     "ü•ì",
		"Escalope de dinde": "üçó",
		"Cuisses de poulet": "üçó",
		"Filet de saumon":   "üêü",
		"Crevettes":         "ü¶ê",

		// Produits laitiers
		"Lait entier":   "ü•õ",
		"Beurre":        "üßà",
		"Cr√®me fra√Æche": "ü•õ",
		"Fromage r√¢p√©":  "üßÄ",
		"Mozzarella":    "üßÄ",
		"Parmesan":      "üßÄ",
		"≈íufs":          "ü•ö",

		// √âpices et herbes
		"Sel":         "üßÇ",
		"Poivre noir": "üå∂Ô∏è",
		"Thym":        "üåø",
		"Basilic":     "üåø",
		"Persil":      "üåø",
		"Paprika":     "üå∂Ô∏è",
		"Cumin":       "üå∂Ô∏è",
		"Origan":      "üåø",

		// F√©culents et c√©r√©ales
		"Riz basmati": "üçö",
		"P√¢tes":       "üçù",
		"Quinoa":      "üåæ",
		"Farine":      "üåæ",
		"Pain":        "ü•ñ",

		// Huiles et condiments
		"Huile d'olive":       "ü´í",
		"Vinaigre balsamique": "üçæ",
		"Moutarde":            "üü°",
		"Sauce soja":          "ü•¢",

		// Fruits
		"Citrons": "üçã",
		"Pommes":  "üçé",
		"Bananes": "üçå",
	}

	// Mettre √† jour chaque ingr√©dient avec son ic√¥ne
	for name, icon := range ingredientIcons {
		ingredient, err := s.ormService.IngredientRepository.GetByName(ctx, name)
		if err != nil {
			// Ingr√©dient non trouv√©, on passe au suivant
			continue
		}

		// Mettre √† jour l'ic√¥ne si elle n'est pas d√©j√† d√©finie
		if ingredient.Icon == "" {
			ingredient.Icon = icon
			if err := s.ormService.IngredientRepository.Update(ctx, ingredient); err != nil {
				return fmt.Errorf("erreur lors de la mise √† jour de l'ic√¥ne pour l'ingr√©dient %s: %w", name, err)
			}
		}
	}

	return nil
}

// UpdateEquipmentsWithIcons met √† jour les √©quipements existants avec des ic√¥nes
func (s *SeederService) UpdateEquipmentsWithIcons(ctx context.Context) error {
	// Mapping des noms d'√©quipements vers leurs ic√¥nes
	equipmentIcons := map[string]string{
		// √âquipements de base
		"Couteau de chef":    "üî™",
		"Planche √† d√©couper": "ü™µ",
		"Casserole":          "üç≤",
		"Po√™le":              "üç≥",
		"Fouet":              "ü•Ñ",
		"Spatule":            "ü•Ñ",
		"Cuill√®re en bois":   "ü•Ñ",

		// √âlectrom√©nager
		"Four":             "üî•",
		"Mixeur":           "üîå",
		"Robot de cuisine": "ü§ñ",
		"Blender":          "üå™Ô∏è",
		"Grille-pain":      "üçû",

		// Mesure et pes√©e
		"Balance de cuisine":  "‚öñÔ∏è",
		"Verre doseur":        "ü•§",
		"Cuill√®res √† mesurer": "ü•Ñ",

		// Ustensiles sp√©cialis√©s
		"R√¢pe":        "üßà",
		"Presse-ail":  "üßÑ",
		"Ouvre-bo√Æte": "ü•´",
		"√âconome":     "üî™",

		// Cuisson sp√©cialis√©e
		"Wok":         "ü•ò",
		"Sauteuse":    "üç≥",
		"Autocuiseur": "üí®",

		// P√¢tisserie
		"Moule √† g√¢teau":       "üéÇ",
		"Rouleau √† p√¢tisserie": "üßë‚Äçüç≥",
		"Poche √† douille":      "üéÇ",
	}

	// Mettre √† jour chaque √©quipement avec son ic√¥ne
	for name, icon := range equipmentIcons {
		equipment, err := s.ormService.EquipmentRepository.GetByName(ctx, name)
		if err != nil {
			// √âquipement non trouv√©, on passe au suivant
			continue
		}

		// Mettre √† jour l'ic√¥ne si elle n'est pas d√©j√† d√©finie
		if equipment.Icon == "" {
			equipment.Icon = icon
			if err := s.ormService.EquipmentRepository.Update(ctx, equipment); err != nil {
				return fmt.Errorf("erreur lors de la mise √† jour de l'ic√¥ne pour l'√©quipement %s: %w", name, err)
			}
		}
	}

	return nil
}
