import { recipeService, favoriteService, recipeListService } from './index';
import type { Recipe, MealPlanCreateRequest } from '../types';
import type { GenerationOptions } from '../components/GeneratePlanModal';

/**
 * Service pour la g√©n√©ration automatique de planning de repas
 */

// Mapping entre les cat√©gories de recettes et les types de repas
const CATEGORY_TO_MEAL_TYPE: Record<string, string[]> = {
  // Cat√©gories pour petit-d√©jeuner
  'petit-d√©jeuner': ['breakfast'],
  'breakfast': ['breakfast'],
  'brunch': ['breakfast', 'lunch'],
  
  // Cat√©gories pour d√©jeuner/d√Æner  
  'plat principal': ['lunch', 'dinner'],
  'entr√©e': ['lunch', 'dinner'],
  'soupe': ['lunch', 'dinner'],
  'salade': ['lunch', 'dinner'],
  'pizza': ['lunch', 'dinner'],
  'p√¢tes': ['lunch', 'dinner'],
  'riz': ['lunch', 'dinner'],
  
  // Cat√©gories pour collations
  'dessert': ['snack'],
  'collation': ['snack'],
  'boisson': ['snack'],
  'smoothie': ['snack'],
  
  // Cat√©gories polyvalentes (peuvent aller partout selon le contexte)
  'v√©g√©tarien': ['breakfast', 'lunch', 'dinner'],
  'vegan': ['breakfast', 'lunch', 'dinner'],
  'sans gluten': ['breakfast', 'lunch', 'dinner'],
};

// Fonction pour d√©terminer quels types de repas conviennent √† une recette
const getRecipeMealTypes = (recipe: Recipe): string[] => {
  const mealTypes = new Set<string>();
  
  // Analyser les cat√©gories de la recette
  if (recipe.categories && recipe.categories.length > 0) {
    recipe.categories.forEach(category => {
      const categoryName = category.name.toLowerCase();
      const mappedMealTypes = CATEGORY_TO_MEAL_TYPE[categoryName];
      
      if (mappedMealTypes) {
        mappedMealTypes.forEach(mealType => mealTypes.add(mealType));
      }
    });
  }
  
  // Si aucune cat√©gorie correspondante, consid√©rer comme plat principal par d√©faut
  if (mealTypes.size === 0) {
    mealTypes.add('lunch');
    mealTypes.add('dinner');
  }
  
  return Array.from(mealTypes);
};

// Fonction pour √©viter les r√©p√©titions intelligemment
const diversifySelection = (recipes: Recipe[], count: number, avoidRepetition: boolean, diversifyCategories: boolean): Recipe[] => {
  if (recipes.length === 0) return [];
  
  const selected: Recipe[] = [];
  const usedRecipes = new Set<number>();
  const usedCategories = new Set<string>();
  
  // Cr√©er une copie m√©lang√©e des recettes
  const shuffledRecipes = [...recipes].sort(() => Math.random() - 0.5);
  
  for (const recipe of shuffledRecipes) {
    if (selected.length >= count) break;
    
    // √âviter les r√©p√©titions si demand√©
    if (avoidRepetition && usedRecipes.has(recipe.id)) {
      continue;
    }
    
    // Diversifier les cat√©gories si demand√©
    if (diversifyCategories && recipe.categories) {
      const recipeCategories = recipe.categories.map(cat => cat.name);
      const hasUsedCategory = recipeCategories.some(cat => usedCategories.has(cat));
      
      // Si on a d√©j√† beaucoup de recettes et qu'on veut diversifier,
      // √©viter les cat√©gories d√©j√† utilis√©es (sauf si on n'a pas le choix)
      if (hasUsedCategory && selected.length > count / 2 && 
          shuffledRecipes.filter(r => !usedRecipes.has(r.id)).length > count - selected.length) {
        continue;
      }
    }
    
    // Ajouter la recette
    selected.push(recipe);
    usedRecipes.add(recipe.id);
    
    // Marquer les cat√©gories comme utilis√©es
    if (recipe.categories) {
      recipe.categories.forEach(cat => usedCategories.add(cat.name));
    }
  }
  
  return selected;
};

// Interface pour les r√©sultats de g√©n√©ration
export interface GenerationResult {
  success: boolean;
  message?: string;
  mealPlans: MealPlanCreateRequest[];
  stats: {
    totalMeals: number;
    recipesUsed: number;
    sourceType: string;
    diversityScore: number; // 0-1, mesure de la diversit√© des cat√©gories
  };
}

/**
 * G√©n√®re un planning de repas automatiquement
 * 
 * Algorithme transparent :
 * 1. R√©cup√®re les recettes selon la source choisie (favoris, liste, populaires)
 * 2. Filtre les recettes selon leurs cat√©gories pour les assigner aux bons types de repas
 * 3. Pour chaque jour de la semaine et chaque type de repas demand√© :
 *    - S√©lectionne une recette appropri√©e en √©vitant les r√©p√©titions
 *    - Diversifie les cat√©gories si demand√©
 * 4. Retourne un planning √©quilibr√© et vari√©
 */
export const mealPlanGenerator = {
  async generateWeeklyPlan(weekStart: string, options: GenerationOptions): Promise<GenerationResult> {
    try {
      console.log('üéØ G√©n√©ration de planning:', { weekStart, options });
      
      // 1. R√©cup√©rer les recettes selon la source
      const recipes = await this.getRecipesBySource(options.source);
      
      if (recipes.length === 0) {
        return {
          success: false,
          message: 'Aucune recette trouv√©e pour la source s√©lectionn√©e.',
          mealPlans: [],
          stats: { totalMeals: 0, recipesUsed: 0, sourceType: options.source.type, diversityScore: 0 }
        };
      }
      
      console.log(`üìö ${recipes.length} recettes disponibles`);
      
      // 2. G√©n√©rer le planning jour par jour
      const mealPlans: MealPlanCreateRequest[] = [];
      const usedRecipes = new Set<number>();
      const categoryStats = new Map<string, number>();
      
      // Obtenir les jours de la semaine
      const weekDays = this.getWeekDays(weekStart);
      
      for (const day of weekDays) {
        console.log(`üìÖ G√©n√©ration pour ${day}`);
        
        // Pour chaque type de repas demand√©
        const requestedMealTypes = Object.entries(options.mealTypes)
          .filter(([_, enabled]) => enabled)
          .map(([mealType, _]) => mealType);
        
        let dailyMealCount = 0;
        
        for (const mealType of requestedMealTypes) {
          if (dailyMealCount >= options.settings.maxRecipesPerDay) {
            console.log(`‚èπÔ∏è  Limite quotidienne atteinte (${options.settings.maxRecipesPerDay})`);
            break;
          }
          
          // Filtrer les recettes appropri√©es pour ce type de repas
          const suitableRecipes = recipes.filter(recipe => {
            const recipeMealTypes = getRecipeMealTypes(recipe);
            return recipeMealTypes.includes(mealType);
          });
          
          if (suitableRecipes.length === 0) {
            console.log(`‚ö†Ô∏è  Aucune recette appropri√©e pour ${mealType}`);
            continue;
          }
          
          // S√©lectionner une recette en √©vitant les r√©p√©titions
          const availableRecipes = options.settings.avoidRepetition 
            ? suitableRecipes.filter(recipe => !usedRecipes.has(recipe.id))
            : suitableRecipes;
          
          // Si plus de recettes disponibles apr√®s filtrage, utiliser toutes les recettes
          const recipesToChooseFrom = availableRecipes.length > 0 ? availableRecipes : suitableRecipes;
          
          // Diversifier la s√©lection
          const selectedRecipes = diversifySelection(
            recipesToChooseFrom, 
            1, 
            options.settings.avoidRepetition,
            options.settings.diversifyCategories
          );
          
          if (selectedRecipes.length > 0) {
            const selectedRecipe = selectedRecipes[0];
            
            mealPlans.push({
              recipe_id: selectedRecipe.id,
              planned_date: day,
              meal_type: mealType as 'breakfast' | 'lunch' | 'dinner' | 'snack',
              servings: this.getDefaultServings(mealType),
              notes: `G√©n√©r√© automatiquement - ${options.source.type}`
            });
            
            // Marquer comme utilis√©e et comptabiliser les cat√©gories
            usedRecipes.add(selectedRecipe.id);
            selectedRecipe.categories?.forEach(cat => {
              categoryStats.set(cat.name, (categoryStats.get(cat.name) || 0) + 1);
            });
            
            dailyMealCount++;
            
            console.log(`‚úÖ ${mealType}: ${selectedRecipe.title}`);
          }
        }
      }
      
      // 3. Calculer les statistiques
      const diversityScore = this.calculateDiversityScore(categoryStats, mealPlans.length);
      
      console.log('üìä G√©n√©ration termin√©e:', {
        totalMeals: mealPlans.length,
        recipesUsed: usedRecipes.size,
        diversityScore: Math.round(diversityScore * 100) / 100
      });
      
      return {
        success: true,
        mealPlans,
        stats: {
          totalMeals: mealPlans.length,
          recipesUsed: usedRecipes.size,
          sourceType: options.source.type,
          diversityScore
        }
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration:', error);
      return {
        success: false,
        message: 'Erreur lors de la g√©n√©ration du planning.',
        mealPlans: [],
        stats: { totalMeals: 0, recipesUsed: 0, sourceType: options.source.type, diversityScore: 0 }
      };
    }
  },
  
  // R√©cup√©rer les recettes selon la source choisie
  async getRecipesBySource(source: GenerationOptions['source']): Promise<Recipe[]> {
    console.log('üîç R√©cup√©ration des recettes:', source);
    
    try {
      switch (source.type) {
        case 'favorites':
          const favoritesResponse = await favoriteService.getUserFavorites(1, 100);
          return favoritesResponse.success ? favoritesResponse.data.recipes : [];
          
        case 'list':
          if (!source.listId) return [];
          const listResponse = await recipeListService.getRecipeList(source.listId);
          return listResponse.success ? (listResponse.data.recipes || []) : [];
          
        case 'popular':
          const popularResponse = await recipeService.listRecipes({
            sort_by: 'rating',
            sort_order: 'desc',
            limit: 50
          });
          return popularResponse.success ? popularResponse.data.recipes : [];
          
        case 'trending':
          const trendingResponse = await recipeService.listRecipes({
            sort_by: 'created_at',
            sort_order: 'desc',
            limit: 30
          });
          return trendingResponse.success ? trendingResponse.data.recipes : [];
          
        default:
          return [];
      }
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des recettes:', error);
      return [];
    }
  },
  
  // Obtenir les 7 jours de la semaine √† partir du d√©but
  getWeekDays(weekStart: string): string[] {
    const days: string[] = [];
    const startDate = new Date(weekStart);
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i);
      days.push(date.toISOString().split('T')[0]); // Format YYYY-MM-DD
    }
    
    return days;
  },
  
  // Obtenir le nombre de portions par d√©faut selon le type de repas
  getDefaultServings(mealType: string): number {
    switch (mealType) {
      case 'breakfast': return 1;
      case 'lunch': return 2;
      case 'dinner': return 4;
      case 'snack': return 1;
      default: return 2;
    }
  },
  
  // Calculer un score de diversit√© bas√© sur la r√©partition des cat√©gories
  calculateDiversityScore(categoryStats: Map<string, number>, totalMeals: number): number {
    if (totalMeals === 0 || categoryStats.size === 0) return 0;
    
    // Calculer l'entropie de Shannon pour mesurer la diversit√©
    let entropy = 0;
    for (const count of categoryStats.values()) {
      const probability = count / totalMeals;
      entropy -= probability * Math.log2(probability);
    }
    
    // Normaliser entre 0 et 1
    const maxEntropy = Math.log2(categoryStats.size);
    return maxEntropy > 0 ? entropy / maxEntropy : 0;
  }
};